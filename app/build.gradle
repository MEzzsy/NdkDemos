apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.mezzsy.myapplication"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11"//指定C++版本
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"//指定Cmake版本
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

/**
 * 生成Swig的脚本
 */
def mainDir = "${projectDir}/src/main"//main目录
def swigJavaSrc = "${mainDir}/java/com/mezzsy/myapplication/swig"//swig输出目录，需要存在此目录

task clearSwig(type: Delete) {
    delete fileTree(swigJavaSrc) {
        include '*.java'
    }
}

/**
 * 生成之前先清空原来的Swig
 * type类型是命令
 */
task generateSwig(type: Exec, dependsOn: "clearSwig") {
    String osName = System.getProperty("os.name").toLowerCase()
    if (osName.contains("mac")) {
        commandLine 'swig'
        args '-c++', '-java',
                '-package', 'com.mezzsy.myapplication.swig',//包名
                '-outdir', "${swigJavaSrc}",
                "${mainDir}/cpp/swig/my_swig.i"//swig的.i文件
    }
}